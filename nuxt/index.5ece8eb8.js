import{H as u,q as m,D as h}from"./entry.3424c69e.js";let r=!1;const g=u("defualt",{state:()=>({minimum_monthly_expenses:1e3,current_age:29,expected_age:92,initial_funds:0,initial_invest:0,use_monthly_saving_plan:!0,monthly_saving_rate:300,saving_risk_ratio:.5,income_tax:0,invest_tax:0,annual_average_invest_return:.07,annual_average_inflation_rate:.02,inflation_adjusted_hour_rate:!1,simulation:{workers:new Array,cancel:new Array,is_running:!1,progress:[0]}}),getters:{min_annual_expenses:t=>t.minimum_monthly_expenses*12,funding_period:t=>t.expected_age-t.current_age,annual_saving_rate:t=>t.monthly_saving_rate*12,is_busy:t=>t.simulation.is_running,simulation_progress:t=>t.simulation.progress.reduce((e,n)=>e+=n||0,0)/t.simulation.progress.length*100,is_printing:t=>r},actions:{async print_report(){r=!0,m(()=>{window.print(),r=!1})},async show_notification(t){},async show_donation(){},async cancel_simulation(){for(const t of this.simulation.cancel)t("User cancelled simulation.")},async simulate(){for(;this.simulation.workers.length;){const n=this.simulation.workers.pop();n==null||n.terminate()}this.simulation.is_running=!0,this.simulation.progress=[0];const t=(n=1,i=1)=>({expected_min_annual_expenses:this.min_annual_expenses,funding_period_years:this.funding_period,annual_saving_rate:this.use_monthly_saving_plan?this.annual_saving_rate:0,saving_risk_ratio:this.saving_risk_ratio,income_tax:this.income_tax,invest_tax:this.invest_tax,avg_annual_inflation_rate:this.annual_average_inflation_rate*n,avg_annual_invest_return:this.annual_average_invest_return*i,adj_hr_by_inflation:this.inflation_adjusted_hour_rate,initial_funds:this.initial_funds,initial_invest:this.initial_invest});return await Promise.all([{label:"user",input:t(1,1),worker:new Worker("worker/simulation.js")},{label:"best",input:t(.5,2),worker:new Worker("worker/simulation.js")},{label:"worst",input:t(2,.5),worker:new Worker("worker/simulation.js")}].map(({label:n,input:i,worker:s},o)=>(this.simulation.workers.push(s),new Promise((_,l)=>{this.simulation.cancel[o]=l,s.onmessage=a=>{typeof a.data=="object"?_({label:n,output:a.data}):this.simulation.progress[o]=a.data},s.postMessage(i)})))).then(n=>Object.fromEntries(n.map(({label:i,output:s})=>[i,s]))).finally(()=>{for(;this.simulation.workers.length;){const n=this.simulation.workers.pop();n==null||n.terminate()}this.simulation.is_running=!1})},share(){const t=JSON.parse(JSON.stringify(this.$state));return delete t.simulation,btoa(JSON.stringify(t))},load(t){try{const e=JSON.parse(atob(t));this.$patch(e)}catch(e){throw h({statusCode:400,statusMessage:`Failed to decode shared code! ${e}`,fatal:!0})}}}});export{g as u};
